import React, { useState } from 'react';
import {
  Box,
  Button,
  Text,
  VStack,
  SimpleGrid,
  useToast,
  Heading,
  Image,
  Badge,
  HStack,
  Spinner,
  useColorModeValue,
} from '@chakra-ui/react';
import { useAuth } from '../../context/AuthContext';
import { autoGenerateAlbum, createAutoGeneratedAlbum } from '../../services/ai';

const AutoAlbumGenerator = () => {
  const [loading, setLoading] = useState(false);
  const [suggestions, setSuggestions] = useState(null);
  const [creatingAlbum, setCreatingAlbum] = useState(false);
  const { currentUser } = useAuth();
  const toast = useToast();
  
  const bgColor = useColorModeValue('white', 'gray.800');
  const borderColor = useColorModeValue('gray.200', 'gray.700');

  const handleGenerateSuggestions = async () => {
    if (!currentUser) return;
    
    setLoading(true);
    try {
      const albumSuggestions = await autoGenerateAlbum(currentUser.uid);
      setSuggestions(albumSuggestions);
      
      if (Object.keys(albumSuggestions).length === 0) {
        toast({
          title: 'No Suggestions',
          description: 'Not enough tagged photos to generate album suggestions.',
          status: 'info',
          duration: 5000,
        });
      }
    } catch (error) {
      console.error('Error generating suggestions:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to generate album suggestions',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAlbum = async (albumKey, albumData) => {
    if (!currentUser || creatingAlbum) return;
    
    setCreatingAlbum(true);
    try {
      await createAutoGeneratedAlbum(currentUser.uid, albumData);
      
      // Remove the created album from suggestions
      const newSuggestions = { ...suggestions };
      delete newSuggestions[albumKey];
      setSuggestions(newSuggestions);
      
      toast({
        title: 'Album Created',
        description: `Created album: ${albumData.name}`,
        status: 'success',
        duration: 3000,
      });
    } catch (error) {
      console.error('Error creating album:', error);
      toast({
        title: 'Error',
        description: error.message || 'Failed to create album',
        status: 'error',
        duration: 5000,
      });
    } finally {
      setCreatingAlbum(false);
    }
  };

  return (
    <Box>
      <VStack spacing={6} align="stretch">
        <Box textAlign="center">
          <Button
            colorScheme="purple"
            size="lg"
            onClick={handleGenerateSuggestions}
            isLoading={loading}
            loadingText="Generating..."
          >
            Generate Album Suggestions
          </Button>
        </Box>

        {suggestions && Object.keys(suggestions).length > 0 && (
          <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing={6}>
            {Object.entries(suggestions).map(([key, album]) => (
              <Box
                key={key}
                p={4}
                borderWidth="1px"
                borderRadius="lg"
                bg={bgColor}
                borderColor={borderColor}
                transition="all 0.2s"
                _hover={{ transform: 'translateY(-2px)', shadow: 'md' }}
              >
                {album.previewImage && (
                  <Box
                    position="relative"
                    height="200px"
                    mb={4}
                    borderRadius="md"
                    overflow="hidden"
                  >
                    <Image
                      src={album.previewImage}
                      alt={album.name}
                      objectFit="cover"
                      w="100%"
                      h="100%"
                    />
                  </Box>
                )}

                <VStack align="stretch" spacing={2}>
                  <Heading size="md">{album.name}</Heading>
                  <Text color="gray.500" fontSize="sm">
                    {album.description}
                  </Text>
                  <HStack>
                    <Badge colorScheme="purple">
                      {album.count} photos
                    </Badge>
                  </HStack>
                  <Button
                    colorScheme="purple"
                    variant="outline"
                    size="sm"
                    onClick={() => handleCreateAlbum(key, album)}
                    isLoading={creatingAlbum}
                  >
                    Create Album
                  </Button>
                </VStack>
              </Box>
            ))}
          </SimpleGrid>
        )}

        {loading && (
          <Box textAlign="center" py={10}>
            <Spinner size="xl" color="purple.500" />
            <Text mt={4}>Analyzing your photos...</Text>
          </Box>
        )}

        {suggestions && Object.keys(suggestions).length === 0 && !loading && (
          <Box textAlign="center" py={10}>
            <Text fontSize="lg" color="gray.500">
              No album suggestions available. Try adding more tagged photos!
            </Text>
          </Box>
        )}
      </VStack>
    </Box>
  );
};

export default AutoAlbumGenerator;
